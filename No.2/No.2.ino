#include <stdio.h> 
#include <stdlib.h>

#define ROUND_NUM 100 
typedef unsigned char u8;
  
u8 sbox2[256] = { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7,
  0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf,
  0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5,
  0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
  0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e,
  0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed,
  0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef,
  0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff,
  0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d,
  0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
  0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
  0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5,
  0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e,
  0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e,
  0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55,
  0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,
  0xb0, 0x54, 0xbb, 0x16 };

u8 sbox3[256] = { 0x9c, 0x83, 0x88, 0x84, 0x0d, 0x94, 0x90, 0x3a, 0xcf, 0xfe, 0x98, 0xd4, 0x01, 0x28, 0x54, 0x89,
  0x35, 0x7d, 0x36, 0x82, 0x05, 0xa6, 0xb8, 0x0f, 0x52, 0x2b, 0x5d, 0x50, 0x63, 0x5b, 0x8d, 0x3f,
  0x48, 0x02, 0x6c, 0xd9, 0xc9, 0xc0, 0x08, 0x33, 0xcb, 0x5a, 0x1a, 0x0e, 0x8e, 0x27, 0xce, 0xea,
  0xfb, 0x38, 0xdc, 0x3c, 0xe7, 0x69, 0xfa, 0x65, 0xf8, 0xed, 0x7f, 0x1d, 0x14, 0xd8, 0x4d, 0x8a,
  0xf6, 0x7c, 0xd3, 0xe5, 0xe4, 0x91, 0xa5, 0x5f, 0xad, 0xc4, 0x29, 0x4c, 0xd6, 0x1c, 0xd0, 0x7b,
  0xac, 0x2e, 0xff, 0x12, 0xdf, 0x03, 0x4e, 0xa4, 0x95, 0x34, 0x41, 0xc6, 0xb5, 0xb3, 0xa7, 0x30,
  0x2f, 0x10, 0x55, 0x04, 0xbc, 0xb2, 0xcc, 0x7a, 0xba, 0x06, 0xfd, 0x80, 0xaf, 0xc3, 0x60, 0x57,
  0xae, 0x5c, 0xbf, 0x70, 0x6d, 0x62, 0xc7, 0x0a, 0x43, 0x49, 0x25, 0xde, 0xef, 0x00, 0x0c, 0x2d,
  0x32, 0xf3, 0xec, 0x13, 0xa0, 0x68, 0xbb, 0xe8, 0x3b, 0x58, 0x81, 0xc2, 0x9b, 0xa2, 0xe6, 0x8c,
  0x9f, 0x7e, 0xb0, 0x23, 0xdd, 0xd5, 0x6f, 0x77, 0xb9, 0x11, 0x47, 0xeb, 0x21, 0xa1, 0xf4, 0x24,
  0x1f, 0xcd, 0xc5, 0xf5, 0xb6, 0xf9, 0xdb, 0xa3, 0x3d, 0x2c, 0x53, 0x9d, 0x6e, 0x6a, 0x1b, 0x86,
  0x18, 0x37, 0xc8, 0x92, 0x72, 0x2a, 0xb1, 0x56, 0x93, 0xa9, 0x0b, 0x15, 0x9a, 0x85, 0x51, 0xf7,
  0x45, 0x87, 0xda, 0xd1, 0xe3, 0x59, 0x4b, 0x39, 0x17, 0x22, 0x8b, 0xe0, 0xb4, 0x42, 0x74, 0x75,
  0x8f, 0xc1, 0x4a, 0x99, 0xb7, 0xfc, 0x09, 0xf1, 0x9e, 0xca, 0xa8, 0x46, 0x79, 0x3e, 0xe2, 0x61,
  0x1e, 0x07, 0x67, 0xee, 0x96, 0x26, 0x71, 0x6b, 0x64, 0xe1, 0x78, 0x16, 0x31, 0xaa, 0xd7, 0x20,
  0x73, 0x5e, 0x76, 0xf2, 0x40, 0x19, 0xbd, 0x97, 0xbe, 0x66, 0xd2, 0xf0, 0x4f, 0xab, 0x44, 0xe9 };

void key_gen(u8* rnd, u8* key) { 
  u8 key1 = ~key[0]; 
  u8 key2 = ~key[1]; 
  u8 A, B;

  A = key1 + key2;
  rnd[0] = (key1 | key2) + 0xff;
  rnd[1] = A - rnd[0];

  B = ~rnd[0] + ~rnd[1];
  key2 = ~(rnd[0] & rnd[1]) + 0xfe;
  key1 = B - key2;

  rnd[2] = key1;
  rnd[3] = key2;

  int i, j = 4, k=0xfd;
  for (i = 2; i < ROUND_NUM; i=i+2) {
    key1 = ~(key1 & key2) + (k--); 
    key2 = A - key1;

    rnd[j++] = key1; 
    rnd[j++] = key2;

    key2 = ~(key1 & key2) + (k--); 
    key1 = B - key2;
  
    rnd[j++] = key1; 
    rnd[j++] = key2;
  }
}

void enc(u8* text, u8* rnd) { 
  u8 text1 = ~text[0]; 
  u8 text2 = ~text[1]; 
  u8 tmp1, tmp2;

  // 0 ROUND
  tmp1 = ((text1 + text2) ^ text1) - rnd[0];
  tmp2 = (-text1) ^ rnd[1];
  
  int i, j = 2; 
  for (i = 1; i < ROUND_NUM - 1; i = i + 2) { 
    text1 = tmp1; 
    text2 = sbox3[tmp2];

    tmp1 = ((text1 + text2) ^ text2) - rnd[j++]; 
    tmp2 = (-text2) ^ rnd[j++];
  
    text1 = tmp1; 
    text2 = sbox3[tmp2];

    tmp1 = ((text1 + text2) ^ text1) - rnd[j++]; 
    tmp2 = (-text1) ^ rnd[j++];
   
  } 
  
  // 99 ROUND
  text1 = tmp1;
  text2 = sbox3[tmp2];
  
  tmp1 = ((text1 + text2) ^ text2) - rnd[198];
  tmp2 = (-text2) ^ rnd[199];
  
  text[0] = ~tmp1;
  text[1] = sbox2[tmp2];
 
}


void testVector(){
  u8 key[2] = { 0x12, 0x34 }; 
  u8 rnd[ROUND_NUM * 2] = { 0, }; 
  u8 text[2] = { 0x56, 0x78 };

  Serial.print("plain text : ");Serial.print(text[0],HEX);Serial.print(text[1],HEX);
  key_gen(rnd, key);
  enc(text, rnd); 
  Serial.print("\ncipher text : ");Serial.print(text[0],HEX);Serial.println(text[1],HEX);
  
}


void loop(){
}

void setup(){
  Serial.begin(9600);

  u8 key[2] = { 0x12, 0x34 };   
  u8 rnd[ROUND_NUM * 2] = { 0, }; 
  u8 text[2] = { 0x56, 0x78 };

  u32 time1; 
  u32 time2;

  //테스트벡터 확인
  testVector();

  //벤치마크
  time1 = millis(); 
  for (int i = 0; i < 10000; i++) { 
    key_gen(rnd, key);
    enc(text, rnd); 
  }  
  time2 = millis();
  Serial.println((time2 - time1));
}
